/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.compiortigoza;

import java.awt.BorderLayout;
import java.awt.List;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;

/**
 *
 * @author rncb0
 */
public class GUIFrame extends javax.swing.JFrame {

    /**
     * Creates new form GUIFrame
     */
    public GUIFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAutoRequestFocus(false);
        setBackground(new java.awt.Color(0, 0, 0));
        setForeground(java.awt.Color.green);

        jLabel1.setFont(new java.awt.Font("Minecraft", 0, 18)); // NOI18N
        jLabel1.setText("Entrega de compiladores:  1er Parcial");

        jButton2.setFont(new java.awt.Font("Minecraft", 0, 12)); // NOI18N
        jButton2.setText("Crear AFN");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Minecraft", 0, 12)); // NOI18N
        jButton3.setText("Unir AFN");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Minecraft", 0, 12)); // NOI18N
        jButton4.setText("Salir");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setFont(new java.awt.Font("Minecraft", 0, 12)); // NOI18N
        jButton5.setText("Cerradura Positiva");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setFont(new java.awt.Font("Minecraft", 0, 12)); // NOI18N
        jButton6.setText("Cerradura Kleen");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setFont(new java.awt.Font("Minecraft", 0, 12)); // NOI18N
        jButton7.setText("Cerradura Opcional");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setFont(new java.awt.Font("Minecraft", 0, 12)); // NOI18N
        jButton8.setText("Concatenar AFN");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Minecraft", 0, 14)); // NOI18N
        jLabel2.setText("Cerraduras");

        jLabel3.setFont(new java.awt.Font("Minecraft", 0, 14)); // NOI18N
        jLabel3.setText("AFN");

        jButton9.setFont(new java.awt.Font("Minecraft", 0, 12)); // NOI18N
        jButton9.setText("Ver AFN");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setFont(new java.awt.Font("Minecraft", 0, 12)); // NOI18N
        jButton10.setText("Mega AFN");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setFont(new java.awt.Font("Minecraft", 0, 12)); // NOI18N
        jButton11.setText("Analizador Lexico");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton12.setFont(new java.awt.Font("Minecraft", 0, 12)); // NOI18N
        jButton12.setText("Nuevo AFD");
        jButton12.setToolTipText("");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jButton13.setFont(new java.awt.Font("Minecraft", 0, 12)); // NOI18N
        jButton13.setText("Abrir AFD");
        jButton13.setToolTipText("");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Minecraft", 0, 14)); // NOI18N
        jLabel4.setText("AFD");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(131, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(75, 75, 75))
                                    .addComponent(jButton6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton13, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(19, 19, 19))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(29, 29, 29)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(454, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel1)
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton13, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(92, 92, 92)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(279, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    // CREAR AFN
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        System.out.println("Mostrando Ventana de crear AFN!");
        new NuevoAFN().setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    
    // UNIR AFN
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        Brain b = Brain.getInstance();
        if (b.getListaAutomatas().size() < 2) {
            JOptionPane.showMessageDialog(this, "Debe haber al menos dos automatas creados para realizar esta operacion", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            Map<String, AFN> automatas = b.getListaAutomatas();
            String[] automataNames = automatas.keySet().toArray(new String[automatas.size()]);
            String firstAutomata = (String) JOptionPane.showInputDialog(
                    this,
                    "Seleccione el primer automata:",
                    "Automatas",
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    automataNames,
                    automataNames[0]);
            if (firstAutomata != null) {
                String secondAutomata = (String) JOptionPane.showInputDialog(
                        this,
                        "Seleccione el segundo automata:",
                        "Automatas",
                        JOptionPane.PLAIN_MESSAGE,
                        null,
                        automataNames,
                        automataNames[0]);
                if (secondAutomata != null && !firstAutomata.equals(secondAutomata)) {

                    AFN a1 = b.getListaAutomatas().get(firstAutomata);
                    AFN a2 = b.getListaAutomatas().get(secondAutomata);

                    AFN aux = a1.unirAFN(a2);
                    b.deleteAutomata(firstAutomata);
                    b.deleteAutomata(secondAutomata);
                    b.agregarAFN(firstAutomata, aux);
                    JOptionPane.showMessageDialog(this, "Se ha unido " + firstAutomata + " y " + secondAutomata);

                } else if (secondAutomata != null && firstAutomata.equals(secondAutomata)) {
                    JOptionPane.showMessageDialog(this, "Los dos automatas seleccionados deben ser diferentes");
                }
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    
   // CERRAR VENTANA
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        
        this.setVisible(false);
        dispose();
        
    }//GEN-LAST:event_jButton4ActionPerformed

    // CERRADURA POSITIVA
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        Brain b = Brain.getInstance();
        if (b.listaAutomatasEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay ningun automata creado!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            Map<String, AFN> automatas = b.getListaAutomatas();
            String[] automataNames = automatas.keySet().toArray(new String[automatas.size()]);
            String selectedAutomata = (String) JOptionPane.showInputDialog(
                    this,
                    "Seleccione un automata:",
                    "Automatas",
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    automataNames,
                    automataNames[0]);
            if (selectedAutomata != null) {
                
                AFN tmp = b.getListaAutomatas().get(selectedAutomata);
                AFN aux = tmp.cerrPos();
                b.deleteAutomata(selectedAutomata);
                b.agregarAFN(selectedAutomata, aux);
                JOptionPane.showMessageDialog(this, "Cerradura Positiva aplicada a " + selectedAutomata);
            }
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    // CERRADURA KLEEN
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        Brain b = Brain.getInstance();
        if (b.listaAutomatasEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay ningun automata creado!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            Map<String, AFN> automatas = b.getListaAutomatas();
            String[] automataNames = automatas.keySet().toArray(new String[automatas.size()]);
            String selectedAutomata = (String) JOptionPane.showInputDialog(
                    this,
                    "Seleccione un automata:",
                    "Automatas",
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    automataNames,
                    automataNames[0]);
            if (selectedAutomata != null) {
                
                AFN tmp = b.getListaAutomatas().get(selectedAutomata);
                AFN aux = tmp.cerrKleen();
                b.deleteAutomata(selectedAutomata);
                b.agregarAFN(selectedAutomata, aux);
                JOptionPane.showMessageDialog(this, "Cerradura de Kleen aplicada a " + selectedAutomata);
            }
        }
    }//GEN-LAST:event_jButton6ActionPerformed
    
    // CERRADURA OPCIONAL
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        
        Brain b = Brain.getInstance();
        if (b.listaAutomatasEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay ningun automata creado!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            Map<String, AFN> automatas = b.getListaAutomatas();
            String[] automataNames = automatas.keySet().toArray(new String[automatas.size()]);
            String selectedAutomata = (String) JOptionPane.showInputDialog(
                    this,
                    "Seleccione un automata:",
                    "Automatas",
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    automataNames,
                    automataNames[0]);
            if (selectedAutomata != null) {
                
                AFN tmp = b.getListaAutomatas().get(selectedAutomata);
                AFN aux = tmp.cerrOpcional();
                b.deleteAutomata(selectedAutomata);
                b.agregarAFN(selectedAutomata, aux);
                JOptionPane.showMessageDialog(this, "Cerradura Opcional aplicada a " + selectedAutomata);
            }
        }
        
    }//GEN-LAST:event_jButton7ActionPerformed

    // CONCATENAR AFNs
    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
                Brain b = Brain.getInstance();
        if (b.getListaAutomatas().size() < 2) {
            JOptionPane.showMessageDialog(this, "Debe haber al menos dos automatas creados para realizar esta operacion", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            Map<String, AFN> automatas = b.getListaAutomatas();
            String[] automataNames = automatas.keySet().toArray(new String[automatas.size()]);
            String firstAutomata = (String) JOptionPane.showInputDialog(
                    this,
                    "Seleccione el primer automata:",
                    "Automatas",
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    automataNames,
                    automataNames[0]);
            if (firstAutomata != null) {
                String secondAutomata = (String) JOptionPane.showInputDialog(
                        this,
                        "Seleccione el segundo automata:",
                        "Automatas",
                        JOptionPane.PLAIN_MESSAGE,
                        null,
                        automataNames,
                        automataNames[0]);
                if (secondAutomata != null && !firstAutomata.equals(secondAutomata)) {

                    AFN a1 = b.getListaAutomatas().get(firstAutomata);
                    AFN a2 = b.getListaAutomatas().get(secondAutomata);

                    AFN aux = a1.concaAFN(a2);
                    b.deleteAutomata(firstAutomata);
                    b.deleteAutomata(secondAutomata);
                    b.agregarAFN(firstAutomata, aux);
                    JOptionPane.showMessageDialog(this, "Se ha concatenado " + firstAutomata + " y " + secondAutomata);

                } else if (secondAutomata != null && firstAutomata.equals(secondAutomata)) {
                    JOptionPane.showMessageDialog(this, "Los dos automatas seleccionados deben ser diferentes");
                }
            }
        }
    }//GEN-LAST:event_jButton8ActionPerformed
    
    
    // VER AFN
    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        
        Brain b = Brain.getInstance();
        if (b.listaAutomatasEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay ningun automata creado!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            Map<String, AFN> automatas = b.getListaAutomatas();
            String[] automataNames = automatas.keySet().toArray(new String[automatas.size()]);
            String selectedAutomata = (String) JOptionPane.showInputDialog(
                    this,
                    "Seleccione un automata:",
                    "Automatas",
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    automataNames,
                    automataNames[0]);
            if (selectedAutomata != null) {
                b.getListaAutomatas().get(selectedAutomata).imprimeAFN(1);
            }
        }
        
    }//GEN-LAST:event_jButton9ActionPerformed
    
    // Crear MEGA AFN
    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        Brain b = Brain.getInstance();
    Map<String, AFN> automatas = b.getListaAutomatas();
    int numAutomatas = automatas.size();
    if (numAutomatas < 2) {
        JOptionPane.showMessageDialog(this, "Debe haber al menos dos automatas creados para realizar esta operacion", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    String[] automataNames = automatas.keySet().toArray(new String[numAutomatas]);
    Object[][] tableData = new Object[numAutomatas][3];
    int i = 0;
    for (Map.Entry<String, AFN> entry : automatas.entrySet()) {
        tableData[i][0] = Boolean.FALSE; // unchecked by default
        tableData[i][1] = entry.getKey();
        tableData[i][2] = ""; // empty token by default
        i++;
    }
    String[] columnNames = {"Seleccionar", "AFN", "Token"};
    JTable table = new JTable(tableData, columnNames) {
        @Override
        public Class<?> getColumnClass(int column) {
            switch (column) {
                case 0:
                    return Boolean.class;
                case 1:
                case 2:
                    return String.class;
                default:
                    return Object.class;
            }
        }
    };
    
    
    Map<Integer, AFN> porUnir = new HashMap<>(); 
    
    
    table.getColumnModel().getColumn(0).setCellRenderer(table.getDefaultRenderer(Boolean.class));
    table.getColumnModel().getColumn(0).setCellEditor(table.getDefaultEditor(Boolean.class));
    JScrollPane scrollPane = new JScrollPane(table);
    JPanel panel = new JPanel(new BorderLayout());
    panel.add(scrollPane, BorderLayout.CENTER);
    int result = JOptionPane.showConfirmDialog(this, panel, "Seleccione los AFNs y tokens", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
    if (result == JOptionPane.OK_OPTION) {
    var selectedRows = new ArrayList<String>();
    for (i = 0; i < numAutomatas; i++) {
        Boolean selected = (Boolean) table.getValueAt(i, 0);
        if (selected) {
            String automataName = (String) table.getValueAt(i, 1);
            String token = (String) table.getValueAt(i, 2);
            
            System.out.println("Imprimiendo token");            
            System.out.println(token);

            // Una vez que tengamos el automata y el token ahora si podemos unirlas en un AFN
            
            porUnir.put(Integer.valueOf(token), b.getListaAutomatas().get(automataName));
            selectedRows.add(automataName);
        }
    }
    if (selectedRows.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Debe seleccionar al menos un AFN y token", "Error", JOptionPane.ERROR_MESSAGE);
    } else {
        System.out.println("Filas seleccionadas: " + selectedRows);
        
        for(Integer x: porUnir.keySet()) {
            for(Estado e: porUnir.get(x).edosAcept) {
                    e.setToken(x);
            }
        }
        
        // Creamos un AFN nuevo y unimos los porUnir con este
        AFN mega = new AFN();
        Estado eInicial = new Estado();
        Transicion t;
        for(Integer q: porUnir.keySet()) {
            t = new Transicion(SimbolosEspeciales.EPSILON, porUnir.get(q).edoIni);
            eInicial.setTransicion(t);
            mega.alfabeto.addAll(porUnir.get(q).alfabeto);
            mega.edosAcept.addAll(porUnir.get(q).edosAcept);
            mega.edosAFN.addAll(porUnir.get(q).edosAFN);
        }
        mega.edoIni = eInicial;
        mega.edosAFN.add(eInicial);
        
        String resp = JOptionPane.showInputDialog("Ingrese un nombre para el automata especial");
        b.agregarMega(resp, mega);
        //mega.imprimeAFN(2);
        JOptionPane.showMessageDialog(null,"AFN especial creado correctamente");

        for(String s: selectedRows) {
                b.deleteAutomata(s);
        }
		
        }
}
    }//GEN-LAST:event_jButton10ActionPerformed

    
    //Analizador Lexico
    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed

    
        var b = Brain.getInstance();

        if(b.listaAFDEmpty()){
             JOptionPane.showMessageDialog(this, "No hay ningun AFD", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        JFrame frame = new JFrame("Analizador Lexico");

    frame.setLayout(new BorderLayout());

    JPanel dropdownPanel = new JPanel();
    frame.add(dropdownPanel, BorderLayout.NORTH);

    JLabel dropdownLabel = new JLabel("AFD a utilizar:");
    dropdownPanel.add(dropdownLabel);

    JComboBox<String> dropdown = new JComboBox<>(b.getListaAFD().keySet().toArray(new String[0]));
    dropdownPanel.add(dropdown);

    JPanel inputPanel = new JPanel();
    frame.add(inputPanel, BorderLayout.CENTER);

    JLabel inputLabel = new JLabel("Cadena a analizar lexicamente:");
    inputPanel.add(inputLabel);

    JTextField inputField = new JTextField(20);
    inputPanel.add(inputField);

    JButton analyzeButton = new JButton("Analizar");
    analyzeButton.addActionListener((ActionEvent e) -> {
        
    
        String sigma = inputField.getText();
        String nombre_afd = (String) dropdown.getSelectedItem();
        
        System.out.println("SIGMA: " + sigma);
        System.out.println("NOMBRE AFD: " + nombre_afd);
        
        var al = new AnalizadorLexico(b.getListaAFD().get(nombre_afd), sigma);
        int token;
        while((token=al.yylex())!=0){
            System.out.println("Token: " + token + " y lexema: " + al.getLexema());
        }
        
        });
    inputPanel.add(analyzeButton);

    JButton cancelButton = new JButton("Cancelar");
    cancelButton.addActionListener((ActionEvent e) -> {
        frame.setVisible(false);
        });
    inputPanel.add(cancelButton);

    frame.setSize(400, 150);
    frame.setVisible(true);
        
        
    }//GEN-LAST:event_jButton11ActionPerformed

    
    // CONVERTIR A AFD
    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        
        Brain b = Brain.getInstance();
        if (b.listaMegasEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay ningun automata mega creado!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            Map<String, AFN> megas = b.getListaMegas();
            String[] automataNames = megas.keySet().toArray(new String[megas.size()]);
            String selectedAutomata = (String) JOptionPane.showInputDialog(
                    this,
                    "Seleccione un automata mega:",
                    "Automatas",
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    automataNames,
                    automataNames[0]);
            if (selectedAutomata != null) {
                
                // En caso de que si exista algun automata MEGA creado
                
		int EstadoActual = 0;
		int EstadoDelAFD;
		AFN convertir = b.getListaMegas().get(selectedAutomata);
		Map<Integer, HashSet<Estado>> EstadosAFD = new HashMap<>();		
		var aux = new ArrayList<Integer>();		
		HashSet<Estado> resultadoDeMoverA;	
		HashSet<Estado> EstadosResultadoDeCerradura;		
		Map<HashSet<Estado>, Integer> EstadosAFDInverso = new HashMap<>();
		
		
		EstadosAFD.put(EstadoActual, convertir.cerraduraEpsilon(convertir.getEdoInicial()));
		
		
		aux.add(EstadoActual);
		
		
		while(!aux.isEmpty()) {
			
			EstadoDelAFD = aux.get(0);
			aux.remove(0);
			
			
			for(Character c: convertir.alfabeto) {
			
				EstadosResultadoDeCerradura = new HashSet<>();
				
				resultadoDeMoverA = convertir.moverA(EstadosAFD.get(EstadoDelAFD), c);
				
				for(Estado e: resultadoDeMoverA) {
					EstadosResultadoDeCerradura.addAll(convertir.cerraduraEpsilon(e));
				}
				
				if(!EstadosResultadoDeCerradura.isEmpty()) {
					
					if(!EstadosAFD.containsValue(EstadosResultadoDeCerradura)) {
						EstadoActual++;
						EstadosAFD.put(EstadoActual, EstadosResultadoDeCerradura);
						EstadosAFDInverso.put(EstadosResultadoDeCerradura, EstadoActual);
						aux.add(EstadoActual);
					}
				}
			}
		}
                
                // Creando la Matriz
                
                int token;
                String [][]matriz = new String[EstadosAFD.size()][256];
		
		for(int fila=0; fila<EstadosAFD.size(); fila++) {
			for(int columna=0; columna<256; columna++) {
				if(columna<255) {
					EstadosResultadoDeCerradura = new HashSet<>();
					resultadoDeMoverA = convertir.moverA(EstadosAFD.get(fila) ,(char)columna);
					for(Estado e: resultadoDeMoverA) {
						EstadosResultadoDeCerradura.addAll(convertir.cerraduraEpsilon(e));
					}
					if(EstadosAFD.containsValue(EstadosResultadoDeCerradura)) {
						matriz[fila][columna] = EstadosAFDInverso.get(EstadosResultadoDeCerradura)+"";
					}else {
						if(convertir.alfabeto.contains((char)columna)){
							matriz[fila][columna] = "-1";
						}else {
							matriz[fila][columna] = "-2";
						}
					}
				}else {
					token=-1;
					for(Estado e: EstadosAFD.get(fila)) {
						if(e.getToken()!=-1) {
							token = e.getToken();
						}
					}
					matriz[fila][columna]=token+"";
				}
			}
		}
                
                
                // Guardando en Brain
		String nombreAFD = JOptionPane.showInputDialog("Que nombre le quieres poner a tu AFD?");;
		b.agregarAFD(nombreAFD, matriz);
                
                // Guardando en OS
                JFileChooser fileChooser = new JFileChooser();
                fileChooser.setDialogTitle("Guardar Matriz en un archivo");

                int userSelection = fileChooser.showSaveDialog(null);

                if (userSelection == JFileChooser.APPROVE_OPTION) {
                    File fileToSave = fileChooser.getSelectedFile();
                    try {
                        ObjectOutputStream outputStream = new ObjectOutputStream(new FileOutputStream(fileToSave));
                        outputStream.writeObject(b.getListaAFD());
                        outputStream.close();

                        JOptionPane.showMessageDialog(null, "Matriz guardada exitosamente!");
                    } catch (IOException e) {
                        JOptionPane.showMessageDialog(null, "Error guardando matriz: " + e.getMessage());
                    }
                }
                

            }
        }
        
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Importando AFD");

        int userSelection = fileChooser.showOpenDialog(null);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToLoad = fileChooser.getSelectedFile();
            try {
                ObjectInputStream inputStream = new ObjectInputStream(new FileInputStream(fileToLoad));
                
                var b = Brain.getInstance();
                b.importarAFD((Map<String, String[][]>)inputStream.readObject());
                
                inputStream.close();

                JOptionPane.showMessageDialog(null, "AFD importado exitosamente!");
            } catch (IOException | ClassNotFoundException e) {
                JOptionPane.showMessageDialog(null, "Errror importando AFD: " + e.getMessage());
            }
        }

    }//GEN-LAST:event_jButton13ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUIFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    // End of variables declaration//GEN-END:variables
}
